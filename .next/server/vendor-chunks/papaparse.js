/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/papaparse";
exports.ids = ["vendor-chunks/papaparse"];
exports.modules = {

/***/ "(ssr)/./node_modules/papaparse/papaparse.js":
/*!*********************************************!*\
  !*** ./node_modules/papaparse/papaparse.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* @license\nPapa Parse\nv5.4.1\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/ (function(root, factory) {\n    /* globals define */ if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n// in strict mode we cannot access arguments.callee, so we need a named reference to\n// stringify the factory method for the blob worker\n// eslint-disable-next-line func-name\n})(this, function moduleFactory() {\n    \"use strict\";\n    var global = function() {\n        // alternative method, similar to `Function('return this')()`\n        // but without using `eval` (which is disabled when\n        // using Content Security Policy).\n        if (typeof self !== \"undefined\") {\n            return self;\n        }\n        if (false) {}\n        if (typeof global !== \"undefined\") {\n            return global;\n        }\n        // When running tests none of the above have been defined\n        return {};\n    }();\n    function getWorkerBlob() {\n        var URL = global.URL || global.webkitURL || null;\n        var code = moduleFactory.toString();\n        return Papa.BLOB_URL || (Papa.BLOB_URL = URL.createObjectURL(new Blob([\n            \"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\n            \"(\",\n            code,\n            \")();\"\n        ], {\n            type: \"text/javascript\"\n        })));\n    }\n    var IS_WORKER = !global.document && !!global.postMessage, IS_PAPA_WORKER = global.IS_PAPA_WORKER || false;\n    var workers = {}, workerIdCounter = 0;\n    var Papa = {};\n    Papa.parse = CsvToJson;\n    Papa.unparse = JsonToCsv;\n    Papa.RECORD_SEP = String.fromCharCode(30);\n    Papa.UNIT_SEP = String.fromCharCode(31);\n    Papa.BYTE_ORDER_MARK = \"\\uFEFF\";\n    Papa.BAD_DELIMITERS = [\n        \"\\r\",\n        \"\\n\",\n        '\"',\n        Papa.BYTE_ORDER_MARK\n    ];\n    Papa.WORKERS_SUPPORTED = !IS_WORKER && !!global.Worker;\n    Papa.NODE_STREAM_INPUT = 1;\n    // Configurable chunk sizes for local and remote files, respectively\n    Papa.LocalChunkSize = 1024 * 1024 * 10; // 10 MB\n    Papa.RemoteChunkSize = 1024 * 1024 * 5; // 5 MB\n    Papa.DefaultDelimiter = \",\"; // Used if not specified and detection fails\n    // Exposed for testing and development only\n    Papa.Parser = Parser;\n    Papa.ParserHandle = ParserHandle;\n    Papa.NetworkStreamer = NetworkStreamer;\n    Papa.FileStreamer = FileStreamer;\n    Papa.StringStreamer = StringStreamer;\n    Papa.ReadableStreamStreamer = ReadableStreamStreamer;\n    if (typeof PAPA_BROWSER_CONTEXT === \"undefined\") {\n        Papa.DuplexStreamStreamer = DuplexStreamStreamer;\n    }\n    if (global.jQuery) {\n        var $ = global.jQuery;\n        $.fn.parse = function(options) {\n            var config = options.config || {};\n            var queue = [];\n            this.each(function(idx) {\n                var supported = $(this).prop(\"tagName\").toUpperCase() === \"INPUT\" && $(this).attr(\"type\").toLowerCase() === \"file\" && global.FileReader;\n                if (!supported || !this.files || this.files.length === 0) return true; // continue to next input element\n                for(var i = 0; i < this.files.length; i++){\n                    queue.push({\n                        file: this.files[i],\n                        inputElem: this,\n                        instanceConfig: $.extend({}, config)\n                    });\n                }\n            });\n            parseNextFile(); // begin parsing\n            return this; // maintains chainability\n            function parseNextFile() {\n                if (queue.length === 0) {\n                    if (isFunction(options.complete)) options.complete();\n                    return;\n                }\n                var f = queue[0];\n                if (isFunction(options.before)) {\n                    var returned = options.before(f.file, f.inputElem);\n                    if (typeof returned === \"object\") {\n                        if (returned.action === \"abort\") {\n                            error(\"AbortError\", f.file, f.inputElem, returned.reason);\n                            return; // Aborts all queued files immediately\n                        } else if (returned.action === \"skip\") {\n                            fileComplete(); // parse the next file in the queue, if any\n                            return;\n                        } else if (typeof returned.config === \"object\") f.instanceConfig = $.extend(f.instanceConfig, returned.config);\n                    } else if (returned === \"skip\") {\n                        fileComplete(); // parse the next file in the queue, if any\n                        return;\n                    }\n                }\n                // Wrap up the user's complete callback, if any, so that ours also gets executed\n                var userCompleteFunc = f.instanceConfig.complete;\n                f.instanceConfig.complete = function(results) {\n                    if (isFunction(userCompleteFunc)) userCompleteFunc(results, f.file, f.inputElem);\n                    fileComplete();\n                };\n                Papa.parse(f.file, f.instanceConfig);\n            }\n            function error(name, file, elem, reason) {\n                if (isFunction(options.error)) options.error({\n                    name: name\n                }, file, elem, reason);\n            }\n            function fileComplete() {\n                queue.splice(0, 1);\n                parseNextFile();\n            }\n        };\n    }\n    if (IS_PAPA_WORKER) {\n        global.onmessage = workerThreadReceivedMessage;\n    }\n    function CsvToJson(_input, _config) {\n        _config = _config || {};\n        var dynamicTyping = _config.dynamicTyping || false;\n        if (isFunction(dynamicTyping)) {\n            _config.dynamicTypingFunction = dynamicTyping;\n            // Will be filled on first row call\n            dynamicTyping = {};\n        }\n        _config.dynamicTyping = dynamicTyping;\n        _config.transform = isFunction(_config.transform) ? _config.transform : false;\n        if (_config.worker && Papa.WORKERS_SUPPORTED) {\n            var w = newWorker();\n            w.userStep = _config.step;\n            w.userChunk = _config.chunk;\n            w.userComplete = _config.complete;\n            w.userError = _config.error;\n            _config.step = isFunction(_config.step);\n            _config.chunk = isFunction(_config.chunk);\n            _config.complete = isFunction(_config.complete);\n            _config.error = isFunction(_config.error);\n            delete _config.worker; // prevent infinite loop\n            w.postMessage({\n                input: _input,\n                config: _config,\n                workerId: w.id\n            });\n            return;\n        }\n        var streamer = null;\n        if (_input === Papa.NODE_STREAM_INPUT && typeof PAPA_BROWSER_CONTEXT === \"undefined\") {\n            // create a node Duplex stream for use\n            // with .pipe\n            streamer = new DuplexStreamStreamer(_config);\n            return streamer.getStream();\n        } else if (typeof _input === \"string\") {\n            _input = stripBom(_input);\n            if (_config.download) streamer = new NetworkStreamer(_config);\n            else streamer = new StringStreamer(_config);\n        } else if (_input.readable === true && isFunction(_input.read) && isFunction(_input.on)) {\n            streamer = new ReadableStreamStreamer(_config);\n        } else if (global.File && _input instanceof File || _input instanceof Object) streamer = new FileStreamer(_config);\n        return streamer.stream(_input);\n        // Strip character from UTF-8 BOM encoded files that cause issue parsing the file\n        function stripBom(string) {\n            if (string.charCodeAt(0) === 0xfeff) {\n                return string.slice(1);\n            }\n            return string;\n        }\n    }\n    function JsonToCsv(_input, _config) {\n        // Default configuration\n        /** whether to surround every datum with quotes */ var _quotes = false;\n        /** whether to write headers */ var _writeHeader = true;\n        /** delimiting character(s) */ var _delimiter = \",\";\n        /** newline character(s) */ var _newline = \"\\r\\n\";\n        /** quote character */ var _quoteChar = '\"';\n        /** escaped quote character, either \"\" or <config.escapeChar>\" */ var _escapedQuote = _quoteChar + _quoteChar;\n        /** whether to skip empty lines */ var _skipEmptyLines = false;\n        /** the columns (keys) we expect when we unparse objects */ var _columns = null;\n        /** whether to prevent outputting cells that can be parsed as formulae by spreadsheet software (Excel and LibreOffice) */ var _escapeFormulae = false;\n        unpackConfig();\n        var quoteCharRegex = new RegExp(escapeRegExp(_quoteChar), \"g\");\n        if (typeof _input === \"string\") _input = JSON.parse(_input);\n        if (Array.isArray(_input)) {\n            if (!_input.length || Array.isArray(_input[0])) return serialize(null, _input, _skipEmptyLines);\n            else if (typeof _input[0] === \"object\") return serialize(_columns || Object.keys(_input[0]), _input, _skipEmptyLines);\n        } else if (typeof _input === \"object\") {\n            if (typeof _input.data === \"string\") _input.data = JSON.parse(_input.data);\n            if (Array.isArray(_input.data)) {\n                if (!_input.fields) _input.fields = _input.meta && _input.meta.fields || _columns;\n                if (!_input.fields) _input.fields = Array.isArray(_input.data[0]) ? _input.fields : typeof _input.data[0] === \"object\" ? Object.keys(_input.data[0]) : [];\n                if (!Array.isArray(_input.data[0]) && typeof _input.data[0] !== \"object\") _input.data = [\n                    _input.data\n                ]; // handles input like [1,2,3] or ['asdf']\n            }\n            return serialize(_input.fields || [], _input.data || [], _skipEmptyLines);\n        }\n        // Default (any valid paths should return before this)\n        throw new Error(\"Unable to serialize unrecognized input\");\n        function unpackConfig() {\n            if (typeof _config !== \"object\") return;\n            if (typeof _config.delimiter === \"string\" && !Papa.BAD_DELIMITERS.filter(function(value) {\n                return _config.delimiter.indexOf(value) !== -1;\n            }).length) {\n                _delimiter = _config.delimiter;\n            }\n            if (typeof _config.quotes === \"boolean\" || typeof _config.quotes === \"function\" || Array.isArray(_config.quotes)) _quotes = _config.quotes;\n            if (typeof _config.skipEmptyLines === \"boolean\" || typeof _config.skipEmptyLines === \"string\") _skipEmptyLines = _config.skipEmptyLines;\n            if (typeof _config.newline === \"string\") _newline = _config.newline;\n            if (typeof _config.quoteChar === \"string\") _quoteChar = _config.quoteChar;\n            if (typeof _config.header === \"boolean\") _writeHeader = _config.header;\n            if (Array.isArray(_config.columns)) {\n                if (_config.columns.length === 0) throw new Error(\"Option columns is empty\");\n                _columns = _config.columns;\n            }\n            if (_config.escapeChar !== undefined) {\n                _escapedQuote = _config.escapeChar + _quoteChar;\n            }\n            if (typeof _config.escapeFormulae === \"boolean\" || _config.escapeFormulae instanceof RegExp) {\n                _escapeFormulae = _config.escapeFormulae instanceof RegExp ? _config.escapeFormulae : /^[=+\\-@\\t\\r].*$/;\n            }\n        }\n        /** The double for loop that iterates the data and writes out a CSV string including header row */ function serialize(fields, data, skipEmptyLines) {\n            var csv = \"\";\n            if (typeof fields === \"string\") fields = JSON.parse(fields);\n            if (typeof data === \"string\") data = JSON.parse(data);\n            var hasHeader = Array.isArray(fields) && fields.length > 0;\n            var dataKeyedByField = !Array.isArray(data[0]);\n            // If there a header row, write it first\n            if (hasHeader && _writeHeader) {\n                for(var i = 0; i < fields.length; i++){\n                    if (i > 0) csv += _delimiter;\n                    csv += safe(fields[i], i);\n                }\n                if (data.length > 0) csv += _newline;\n            }\n            // Then write out the data\n            for(var row = 0; row < data.length; row++){\n                var maxCol = hasHeader ? fields.length : data[row].length;\n                var emptyLine = false;\n                var nullLine = hasHeader ? Object.keys(data[row]).length === 0 : data[row].length === 0;\n                if (skipEmptyLines && !hasHeader) {\n                    emptyLine = skipEmptyLines === \"greedy\" ? data[row].join(\"\").trim() === \"\" : data[row].length === 1 && data[row][0].length === 0;\n                }\n                if (skipEmptyLines === \"greedy\" && hasHeader) {\n                    var line = [];\n                    for(var c = 0; c < maxCol; c++){\n                        var cx = dataKeyedByField ? fields[c] : c;\n                        line.push(data[row][cx]);\n                    }\n                    emptyLine = line.join(\"\").trim() === \"\";\n                }\n                if (!emptyLine) {\n                    for(var col = 0; col < maxCol; col++){\n                        if (col > 0 && !nullLine) csv += _delimiter;\n                        var colIdx = hasHeader && dataKeyedByField ? fields[col] : col;\n                        csv += safe(data[row][colIdx], col);\n                    }\n                    if (row < data.length - 1 && (!skipEmptyLines || maxCol > 0 && !nullLine)) {\n                        csv += _newline;\n                    }\n                }\n            }\n            return csv;\n        }\n        /** Encloses a value around quotes if needed (makes a value safe for CSV insertion) */ function safe(str, col) {\n            if (typeof str === \"undefined\" || str === null) return \"\";\n            if (str.constructor === Date) return JSON.stringify(str).slice(1, 25);\n            var needsQuotes = false;\n            if (_escapeFormulae && typeof str === \"string\" && _escapeFormulae.test(str)) {\n                str = \"'\" + str;\n                needsQuotes = true;\n            }\n            var escapedQuoteStr = str.toString().replace(quoteCharRegex, _escapedQuote);\n            needsQuotes = needsQuotes || _quotes === true || typeof _quotes === \"function\" && _quotes(str, col) || Array.isArray(_quotes) && _quotes[col] || hasAny(escapedQuoteStr, Papa.BAD_DELIMITERS) || escapedQuoteStr.indexOf(_delimiter) > -1 || escapedQuoteStr.charAt(0) === \" \" || escapedQuoteStr.charAt(escapedQuoteStr.length - 1) === \" \";\n            return needsQuotes ? _quoteChar + escapedQuoteStr + _quoteChar : escapedQuoteStr;\n        }\n        function hasAny(str, substrings) {\n            for(var i = 0; i < substrings.length; i++)if (str.indexOf(substrings[i]) > -1) return true;\n            return false;\n        }\n    }\n    /** ChunkStreamer is the base prototype for various streamer implementations. */ function ChunkStreamer(config) {\n        this._handle = null;\n        this._finished = false;\n        this._completed = false;\n        this._halted = false;\n        this._input = null;\n        this._baseIndex = 0;\n        this._partialLine = \"\";\n        this._rowCount = 0;\n        this._start = 0;\n        this._nextChunk = null;\n        this.isFirstChunk = true;\n        this._completeResults = {\n            data: [],\n            errors: [],\n            meta: {}\n        };\n        replaceConfig.call(this, config);\n        this.parseChunk = function(chunk, isFakeChunk) {\n            // First chunk pre-processing\n            if (this.isFirstChunk && isFunction(this._config.beforeFirstChunk)) {\n                var modifiedChunk = this._config.beforeFirstChunk(chunk);\n                if (modifiedChunk !== undefined) chunk = modifiedChunk;\n            }\n            this.isFirstChunk = false;\n            this._halted = false;\n            // Rejoin the line we likely just split in two by chunking the file\n            var aggregate = this._partialLine + chunk;\n            this._partialLine = \"\";\n            var results = this._handle.parse(aggregate, this._baseIndex, !this._finished);\n            if (this._handle.paused() || this._handle.aborted()) {\n                this._halted = true;\n                return;\n            }\n            var lastIndex = results.meta.cursor;\n            if (!this._finished) {\n                this._partialLine = aggregate.substring(lastIndex - this._baseIndex);\n                this._baseIndex = lastIndex;\n            }\n            if (results && results.data) this._rowCount += results.data.length;\n            var finishedIncludingPreview = this._finished || this._config.preview && this._rowCount >= this._config.preview;\n            if (IS_PAPA_WORKER) {\n                global.postMessage({\n                    results: results,\n                    workerId: Papa.WORKER_ID,\n                    finished: finishedIncludingPreview\n                });\n            } else if (isFunction(this._config.chunk) && !isFakeChunk) {\n                this._config.chunk(results, this._handle);\n                if (this._handle.paused() || this._handle.aborted()) {\n                    this._halted = true;\n                    return;\n                }\n                results = undefined;\n                this._completeResults = undefined;\n            }\n            if (!this._config.step && !this._config.chunk) {\n                this._completeResults.data = this._completeResults.data.concat(results.data);\n                this._completeResults.errors = this._completeResults.errors.concat(results.errors);\n                this._completeResults.meta = results.meta;\n            }\n            if (!this._completed && finishedIncludingPreview && isFunction(this._config.complete) && (!results || !results.meta.aborted)) {\n                this._config.complete(this._completeResults, this._input);\n                this._completed = true;\n            }\n            if (!finishedIncludingPreview && (!results || !results.meta.paused)) this._nextChunk();\n            return results;\n        };\n        this._sendError = function(error) {\n            if (isFunction(this._config.error)) this._config.error(error);\n            else if (IS_PAPA_WORKER && this._config.error) {\n                global.postMessage({\n                    workerId: Papa.WORKER_ID,\n                    error: error,\n                    finished: false\n                });\n            }\n        };\n        function replaceConfig(config) {\n            // Deep-copy the config so we can edit it\n            var configCopy = copy(config);\n            configCopy.chunkSize = parseInt(configCopy.chunkSize); // parseInt VERY important so we don't concatenate strings!\n            if (!config.step && !config.chunk) configCopy.chunkSize = null; // disable Range header if not streaming; bad values break IIS - see issue #196\n            this._handle = new ParserHandle(configCopy);\n            this._handle.streamer = this;\n            this._config = configCopy; // persist the copy to the caller\n        }\n    }\n    function NetworkStreamer(config) {\n        config = config || {};\n        if (!config.chunkSize) config.chunkSize = Papa.RemoteChunkSize;\n        ChunkStreamer.call(this, config);\n        var xhr;\n        if (IS_WORKER) {\n            this._nextChunk = function() {\n                this._readChunk();\n                this._chunkLoaded();\n            };\n        } else {\n            this._nextChunk = function() {\n                this._readChunk();\n            };\n        }\n        this.stream = function(url) {\n            this._input = url;\n            this._nextChunk(); // Starts streaming\n        };\n        this._readChunk = function() {\n            if (this._finished) {\n                this._chunkLoaded();\n                return;\n            }\n            xhr = new XMLHttpRequest();\n            if (this._config.withCredentials) {\n                xhr.withCredentials = this._config.withCredentials;\n            }\n            if (!IS_WORKER) {\n                xhr.onload = bindFunction(this._chunkLoaded, this);\n                xhr.onerror = bindFunction(this._chunkError, this);\n            }\n            xhr.open(this._config.downloadRequestBody ? \"POST\" : \"GET\", this._input, !IS_WORKER);\n            // Headers can only be set when once the request state is OPENED\n            if (this._config.downloadRequestHeaders) {\n                var headers = this._config.downloadRequestHeaders;\n                for(var headerName in headers){\n                    xhr.setRequestHeader(headerName, headers[headerName]);\n                }\n            }\n            if (this._config.chunkSize) {\n                var end = this._start + this._config.chunkSize - 1; // minus one because byte range is inclusive\n                xhr.setRequestHeader(\"Range\", \"bytes=\" + this._start + \"-\" + end);\n            }\n            try {\n                xhr.send(this._config.downloadRequestBody);\n            } catch (err) {\n                this._chunkError(err.message);\n            }\n            if (IS_WORKER && xhr.status === 0) this._chunkError();\n        };\n        this._chunkLoaded = function() {\n            if (xhr.readyState !== 4) return;\n            if (xhr.status < 200 || xhr.status >= 400) {\n                this._chunkError();\n                return;\n            }\n            // Use chunckSize as it may be a diference on reponse lentgh due to characters with more than 1 byte\n            this._start += this._config.chunkSize ? this._config.chunkSize : xhr.responseText.length;\n            this._finished = !this._config.chunkSize || this._start >= getFileSize(xhr);\n            this.parseChunk(xhr.responseText);\n        };\n        this._chunkError = function(errorMessage) {\n            var errorText = xhr.statusText || errorMessage;\n            this._sendError(new Error(errorText));\n        };\n        function getFileSize(xhr) {\n            var contentRange = xhr.getResponseHeader(\"Content-Range\");\n            if (contentRange === null) {\n                return -1;\n            }\n            return parseInt(contentRange.substring(contentRange.lastIndexOf(\"/\") + 1));\n        }\n    }\n    NetworkStreamer.prototype = Object.create(ChunkStreamer.prototype);\n    NetworkStreamer.prototype.constructor = NetworkStreamer;\n    function FileStreamer(config) {\n        config = config || {};\n        if (!config.chunkSize) config.chunkSize = Papa.LocalChunkSize;\n        ChunkStreamer.call(this, config);\n        var reader, slice;\n        // FileReader is better than FileReaderSync (even in worker) - see http://stackoverflow.com/q/24708649/1048862\n        // But Firefox is a pill, too - see issue #76: https://github.com/mholt/PapaParse/issues/76\n        var usingAsyncReader = typeof FileReader !== \"undefined\"; // Safari doesn't consider it a function - see issue #105\n        this.stream = function(file) {\n            this._input = file;\n            slice = file.slice || file.webkitSlice || file.mozSlice;\n            if (usingAsyncReader) {\n                reader = new FileReader(); // Preferred method of reading files, even in workers\n                reader.onload = bindFunction(this._chunkLoaded, this);\n                reader.onerror = bindFunction(this._chunkError, this);\n            } else reader = new FileReaderSync(); // Hack for running in a web worker in Firefox\n            this._nextChunk(); // Starts streaming\n        };\n        this._nextChunk = function() {\n            if (!this._finished && (!this._config.preview || this._rowCount < this._config.preview)) this._readChunk();\n        };\n        this._readChunk = function() {\n            var input = this._input;\n            if (this._config.chunkSize) {\n                var end = Math.min(this._start + this._config.chunkSize, this._input.size);\n                input = slice.call(input, this._start, end);\n            }\n            var txt = reader.readAsText(input, this._config.encoding);\n            if (!usingAsyncReader) this._chunkLoaded({\n                target: {\n                    result: txt\n                }\n            }); // mimic the async signature\n        };\n        this._chunkLoaded = function(event) {\n            // Very important to increment start each time before handling results\n            this._start += this._config.chunkSize;\n            this._finished = !this._config.chunkSize || this._start >= this._input.size;\n            this.parseChunk(event.target.result);\n        };\n        this._chunkError = function() {\n            this._sendError(reader.error);\n        };\n    }\n    FileStreamer.prototype = Object.create(ChunkStreamer.prototype);\n    FileStreamer.prototype.constructor = FileStreamer;\n    function StringStreamer(config) {\n        config = config || {};\n        ChunkStreamer.call(this, config);\n        var remaining;\n        this.stream = function(s) {\n            remaining = s;\n            return this._nextChunk();\n        };\n        this._nextChunk = function() {\n            if (this._finished) return;\n            var size = this._config.chunkSize;\n            var chunk;\n            if (size) {\n                chunk = remaining.substring(0, size);\n                remaining = remaining.substring(size);\n            } else {\n                chunk = remaining;\n                remaining = \"\";\n            }\n            this._finished = !remaining;\n            return this.parseChunk(chunk);\n        };\n    }\n    StringStreamer.prototype = Object.create(StringStreamer.prototype);\n    StringStreamer.prototype.constructor = StringStreamer;\n    function ReadableStreamStreamer(config) {\n        config = config || {};\n        ChunkStreamer.call(this, config);\n        var queue = [];\n        var parseOnData = true;\n        var streamHasEnded = false;\n        this.pause = function() {\n            ChunkStreamer.prototype.pause.apply(this, arguments);\n            this._input.pause();\n        };\n        this.resume = function() {\n            ChunkStreamer.prototype.resume.apply(this, arguments);\n            this._input.resume();\n        };\n        this.stream = function(stream) {\n            this._input = stream;\n            this._input.on(\"data\", this._streamData);\n            this._input.on(\"end\", this._streamEnd);\n            this._input.on(\"error\", this._streamError);\n        };\n        this._checkIsFinished = function() {\n            if (streamHasEnded && queue.length === 1) {\n                this._finished = true;\n            }\n        };\n        this._nextChunk = function() {\n            this._checkIsFinished();\n            if (queue.length) {\n                this.parseChunk(queue.shift());\n            } else {\n                parseOnData = true;\n            }\n        };\n        this._streamData = bindFunction(function(chunk) {\n            try {\n                queue.push(typeof chunk === \"string\" ? chunk : chunk.toString(this._config.encoding));\n                if (parseOnData) {\n                    parseOnData = false;\n                    this._checkIsFinished();\n                    this.parseChunk(queue.shift());\n                }\n            } catch (error) {\n                this._streamError(error);\n            }\n        }, this);\n        this._streamError = bindFunction(function(error) {\n            this._streamCleanUp();\n            this._sendError(error);\n        }, this);\n        this._streamEnd = bindFunction(function() {\n            this._streamCleanUp();\n            streamHasEnded = true;\n            this._streamData(\"\");\n        }, this);\n        this._streamCleanUp = bindFunction(function() {\n            this._input.removeListener(\"data\", this._streamData);\n            this._input.removeListener(\"end\", this._streamEnd);\n            this._input.removeListener(\"error\", this._streamError);\n        }, this);\n    }\n    ReadableStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);\n    ReadableStreamStreamer.prototype.constructor = ReadableStreamStreamer;\n    function DuplexStreamStreamer(_config) {\n        var Duplex = (__webpack_require__(/*! stream */ \"stream\").Duplex);\n        var config = copy(_config);\n        var parseOnWrite = true;\n        var writeStreamHasFinished = false;\n        var parseCallbackQueue = [];\n        var stream = null;\n        this._onCsvData = function(results) {\n            var data = results.data;\n            if (!stream.push(data) && !this._handle.paused()) {\n                // the writeable consumer buffer has filled up\n                // so we need to pause until more items\n                // can be processed\n                this._handle.pause();\n            }\n        };\n        this._onCsvComplete = function() {\n            // node will finish the read stream when\n            // null is pushed\n            stream.push(null);\n        };\n        config.step = bindFunction(this._onCsvData, this);\n        config.complete = bindFunction(this._onCsvComplete, this);\n        ChunkStreamer.call(this, config);\n        this._nextChunk = function() {\n            if (writeStreamHasFinished && parseCallbackQueue.length === 1) {\n                this._finished = true;\n            }\n            if (parseCallbackQueue.length) {\n                parseCallbackQueue.shift()();\n            } else {\n                parseOnWrite = true;\n            }\n        };\n        this._addToParseQueue = function(chunk, callback) {\n            // add to queue so that we can indicate\n            // completion via callback\n            // node will automatically pause the incoming stream\n            // when too many items have been added without their\n            // callback being invoked\n            parseCallbackQueue.push(bindFunction(function() {\n                this.parseChunk(typeof chunk === \"string\" ? chunk : chunk.toString(config.encoding));\n                if (isFunction(callback)) {\n                    return callback();\n                }\n            }, this));\n            if (parseOnWrite) {\n                parseOnWrite = false;\n                this._nextChunk();\n            }\n        };\n        this._onRead = function() {\n            if (this._handle.paused()) {\n                // the writeable consumer can handle more data\n                // so resume the chunk parsing\n                this._handle.resume();\n            }\n        };\n        this._onWrite = function(chunk, encoding, callback) {\n            this._addToParseQueue(chunk, callback);\n        };\n        this._onWriteComplete = function() {\n            writeStreamHasFinished = true;\n            // have to write empty string\n            // so parser knows its done\n            this._addToParseQueue(\"\");\n        };\n        this.getStream = function() {\n            return stream;\n        };\n        stream = new Duplex({\n            readableObjectMode: true,\n            decodeStrings: false,\n            read: bindFunction(this._onRead, this),\n            write: bindFunction(this._onWrite, this)\n        });\n        stream.once(\"finish\", bindFunction(this._onWriteComplete, this));\n    }\n    if (typeof PAPA_BROWSER_CONTEXT === \"undefined\") {\n        DuplexStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);\n        DuplexStreamStreamer.prototype.constructor = DuplexStreamStreamer;\n    }\n    // Use one ParserHandle per entire CSV file or string\n    function ParserHandle(_config) {\n        // One goal is to minimize the use of regular expressions...\n        var MAX_FLOAT = Math.pow(2, 53);\n        var MIN_FLOAT = -MAX_FLOAT;\n        var FLOAT = /^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/;\n        var ISO_DATE = /^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/;\n        var self1 = this;\n        var _stepCounter = 0; // Number of times step was called (number of rows parsed)\n        var _rowCounter = 0; // Number of rows that have been parsed so far\n        var _input; // The input being parsed\n        var _parser; // The core parser being used\n        var _paused = false; // Whether we are paused or not\n        var _aborted = false; // Whether the parser has aborted or not\n        var _delimiterError; // Temporary state between delimiter detection and processing results\n        var _fields = []; // Fields are from the header row of the input, if there is one\n        var _results = {\n            data: [],\n            errors: [],\n            meta: {}\n        };\n        if (isFunction(_config.step)) {\n            var userStep = _config.step;\n            _config.step = function(results) {\n                _results = results;\n                if (needsHeaderRow()) processResults();\n                else {\n                    processResults();\n                    // It's possbile that this line was empty and there's no row here after all\n                    if (_results.data.length === 0) return;\n                    _stepCounter += results.data.length;\n                    if (_config.preview && _stepCounter > _config.preview) _parser.abort();\n                    else {\n                        _results.data = _results.data[0];\n                        userStep(_results, self1);\n                    }\n                }\n            };\n        }\n        /**\n\t\t * Parses input. Most users won't need, and shouldn't mess with, the baseIndex\n\t\t * and ignoreLastRow parameters. They are used by streamers (wrapper functions)\n\t\t * when an input comes in multiple chunks, like from a file.\n\t\t */ this.parse = function(input, baseIndex, ignoreLastRow) {\n            var quoteChar = _config.quoteChar || '\"';\n            if (!_config.newline) _config.newline = guessLineEndings(input, quoteChar);\n            _delimiterError = false;\n            if (!_config.delimiter) {\n                var delimGuess = guessDelimiter(input, _config.newline, _config.skipEmptyLines, _config.comments, _config.delimitersToGuess);\n                if (delimGuess.successful) _config.delimiter = delimGuess.bestDelimiter;\n                else {\n                    _delimiterError = true; // add error after parsing (otherwise it would be overwritten)\n                    _config.delimiter = Papa.DefaultDelimiter;\n                }\n                _results.meta.delimiter = _config.delimiter;\n            } else if (isFunction(_config.delimiter)) {\n                _config.delimiter = _config.delimiter(input);\n                _results.meta.delimiter = _config.delimiter;\n            }\n            var parserConfig = copy(_config);\n            if (_config.preview && _config.header) parserConfig.preview++; // to compensate for header row\n            _input = input;\n            _parser = new Parser(parserConfig);\n            _results = _parser.parse(_input, baseIndex, ignoreLastRow);\n            processResults();\n            return _paused ? {\n                meta: {\n                    paused: true\n                }\n            } : _results || {\n                meta: {\n                    paused: false\n                }\n            };\n        };\n        this.paused = function() {\n            return _paused;\n        };\n        this.pause = function() {\n            _paused = true;\n            _parser.abort();\n            // If it is streaming via \"chunking\", the reader will start appending correctly already so no need to substring,\n            // otherwise we can get duplicate content within a row\n            _input = isFunction(_config.chunk) ? \"\" : _input.substring(_parser.getCharIndex());\n        };\n        this.resume = function() {\n            if (self1.streamer._halted) {\n                _paused = false;\n                self1.streamer.parseChunk(_input, true);\n            } else {\n                // Bugfix: #636 In case the processing hasn't halted yet\n                // wait for it to halt in order to resume\n                setTimeout(self1.resume, 3);\n            }\n        };\n        this.aborted = function() {\n            return _aborted;\n        };\n        this.abort = function() {\n            _aborted = true;\n            _parser.abort();\n            _results.meta.aborted = true;\n            if (isFunction(_config.complete)) _config.complete(_results);\n            _input = \"\";\n        };\n        function testEmptyLine(s) {\n            return _config.skipEmptyLines === \"greedy\" ? s.join(\"\").trim() === \"\" : s.length === 1 && s[0].length === 0;\n        }\n        function testFloat(s) {\n            if (FLOAT.test(s)) {\n                var floatValue = parseFloat(s);\n                if (floatValue > MIN_FLOAT && floatValue < MAX_FLOAT) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function processResults() {\n            if (_results && _delimiterError) {\n                addError(\"Delimiter\", \"UndetectableDelimiter\", \"Unable to auto-detect delimiting character; defaulted to '\" + Papa.DefaultDelimiter + \"'\");\n                _delimiterError = false;\n            }\n            if (_config.skipEmptyLines) {\n                _results.data = _results.data.filter(function(d) {\n                    return !testEmptyLine(d);\n                });\n            }\n            if (needsHeaderRow()) fillHeaderFields();\n            return applyHeaderAndDynamicTypingAndTransformation();\n        }\n        function needsHeaderRow() {\n            return _config.header && _fields.length === 0;\n        }\n        function fillHeaderFields() {\n            if (!_results) return;\n            function addHeader(header, i) {\n                if (isFunction(_config.transformHeader)) header = _config.transformHeader(header, i);\n                _fields.push(header);\n            }\n            if (Array.isArray(_results.data[0])) {\n                for(var i = 0; needsHeaderRow() && i < _results.data.length; i++)_results.data[i].forEach(addHeader);\n                _results.data.splice(0, 1);\n            } else _results.data.forEach(addHeader);\n        }\n        function shouldApplyDynamicTyping(field) {\n            // Cache function values to avoid calling it for each row\n            if (_config.dynamicTypingFunction && _config.dynamicTyping[field] === undefined) {\n                _config.dynamicTyping[field] = _config.dynamicTypingFunction(field);\n            }\n            return (_config.dynamicTyping[field] || _config.dynamicTyping) === true;\n        }\n        function parseDynamic(field, value) {\n            if (shouldApplyDynamicTyping(field)) {\n                if (value === \"true\" || value === \"TRUE\") return true;\n                else if (value === \"false\" || value === \"FALSE\") return false;\n                else if (testFloat(value)) return parseFloat(value);\n                else if (ISO_DATE.test(value)) return new Date(value);\n                else return value === \"\" ? null : value;\n            }\n            return value;\n        }\n        function applyHeaderAndDynamicTypingAndTransformation() {\n            if (!_results || !_config.header && !_config.dynamicTyping && !_config.transform) return _results;\n            function processRow(rowSource, i) {\n                var row = _config.header ? {} : [];\n                var j;\n                for(j = 0; j < rowSource.length; j++){\n                    var field = j;\n                    var value = rowSource[j];\n                    if (_config.header) field = j >= _fields.length ? \"__parsed_extra\" : _fields[j];\n                    if (_config.transform) value = _config.transform(value, field);\n                    value = parseDynamic(field, value);\n                    if (field === \"__parsed_extra\") {\n                        row[field] = row[field] || [];\n                        row[field].push(value);\n                    } else row[field] = value;\n                }\n                if (_config.header) {\n                    if (j > _fields.length) addError(\"FieldMismatch\", \"TooManyFields\", \"Too many fields: expected \" + _fields.length + \" fields but parsed \" + j, _rowCounter + i);\n                    else if (j < _fields.length) addError(\"FieldMismatch\", \"TooFewFields\", \"Too few fields: expected \" + _fields.length + \" fields but parsed \" + j, _rowCounter + i);\n                }\n                return row;\n            }\n            var incrementBy = 1;\n            if (!_results.data.length || Array.isArray(_results.data[0])) {\n                _results.data = _results.data.map(processRow);\n                incrementBy = _results.data.length;\n            } else _results.data = processRow(_results.data, 0);\n            if (_config.header && _results.meta) _results.meta.fields = _fields;\n            _rowCounter += incrementBy;\n            return _results;\n        }\n        function guessDelimiter(input, newline, skipEmptyLines, comments, delimitersToGuess) {\n            var bestDelim, bestDelta, fieldCountPrevRow, maxFieldCount;\n            delimitersToGuess = delimitersToGuess || [\n                \",\",\n                \"\t\",\n                \"|\",\n                \";\",\n                Papa.RECORD_SEP,\n                Papa.UNIT_SEP\n            ];\n            for(var i = 0; i < delimitersToGuess.length; i++){\n                var delim = delimitersToGuess[i];\n                var delta = 0, avgFieldCount = 0, emptyLinesCount = 0;\n                fieldCountPrevRow = undefined;\n                var preview = new Parser({\n                    comments: comments,\n                    delimiter: delim,\n                    newline: newline,\n                    preview: 10\n                }).parse(input);\n                for(var j = 0; j < preview.data.length; j++){\n                    if (skipEmptyLines && testEmptyLine(preview.data[j])) {\n                        emptyLinesCount++;\n                        continue;\n                    }\n                    var fieldCount = preview.data[j].length;\n                    avgFieldCount += fieldCount;\n                    if (typeof fieldCountPrevRow === \"undefined\") {\n                        fieldCountPrevRow = fieldCount;\n                        continue;\n                    } else if (fieldCount > 0) {\n                        delta += Math.abs(fieldCount - fieldCountPrevRow);\n                        fieldCountPrevRow = fieldCount;\n                    }\n                }\n                if (preview.data.length > 0) avgFieldCount /= preview.data.length - emptyLinesCount;\n                if ((typeof bestDelta === \"undefined\" || delta <= bestDelta) && (typeof maxFieldCount === \"undefined\" || avgFieldCount > maxFieldCount) && avgFieldCount > 1.99) {\n                    bestDelta = delta;\n                    bestDelim = delim;\n                    maxFieldCount = avgFieldCount;\n                }\n            }\n            _config.delimiter = bestDelim;\n            return {\n                successful: !!bestDelim,\n                bestDelimiter: bestDelim\n            };\n        }\n        function guessLineEndings(input, quoteChar) {\n            input = input.substring(0, 1024 * 1024); // max length 1 MB\n            // Replace all the text inside quotes\n            var re = new RegExp(escapeRegExp(quoteChar) + \"([^]*?)\" + escapeRegExp(quoteChar), \"gm\");\n            input = input.replace(re, \"\");\n            var r = input.split(\"\\r\");\n            var n = input.split(\"\\n\");\n            var nAppearsFirst = n.length > 1 && n[0].length < r[0].length;\n            if (r.length === 1 || nAppearsFirst) return \"\\n\";\n            var numWithN = 0;\n            for(var i = 0; i < r.length; i++){\n                if (r[i][0] === \"\\n\") numWithN++;\n            }\n            return numWithN >= r.length / 2 ? \"\\r\\n\" : \"\\r\";\n        }\n        function addError(type, code, msg, row) {\n            var error = {\n                type: type,\n                code: code,\n                message: msg\n            };\n            if (row !== undefined) {\n                error.row = row;\n            }\n            _results.errors.push(error);\n        }\n    }\n    /** https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */ function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n    }\n    /** The core parser implements speedy and correct CSV parsing */ function Parser(config) {\n        // Unpack the config object\n        config = config || {};\n        var delim = config.delimiter;\n        var newline = config.newline;\n        var comments = config.comments;\n        var step = config.step;\n        var preview = config.preview;\n        var fastMode = config.fastMode;\n        var quoteChar;\n        if (config.quoteChar === undefined || config.quoteChar === null) {\n            quoteChar = '\"';\n        } else {\n            quoteChar = config.quoteChar;\n        }\n        var escapeChar = quoteChar;\n        if (config.escapeChar !== undefined) {\n            escapeChar = config.escapeChar;\n        }\n        // Delimiter must be valid\n        if (typeof delim !== \"string\" || Papa.BAD_DELIMITERS.indexOf(delim) > -1) delim = \",\";\n        // Comment character must be valid\n        if (comments === delim) throw new Error(\"Comment character same as delimiter\");\n        else if (comments === true) comments = \"#\";\n        else if (typeof comments !== \"string\" || Papa.BAD_DELIMITERS.indexOf(comments) > -1) comments = false;\n        // Newline must be valid: \\r, \\n, or \\r\\n\n        if (newline !== \"\\n\" && newline !== \"\\r\" && newline !== \"\\r\\n\") newline = \"\\n\";\n        // We're gonna need these at the Parser scope\n        var cursor = 0;\n        var aborted = false;\n        this.parse = function(input, baseIndex, ignoreLastRow) {\n            // For some reason, in Chrome, this speeds things up (!?)\n            if (typeof input !== \"string\") throw new Error(\"Input must be a string\");\n            // We don't need to compute some of these every time parse() is called,\n            // but having them in a more local scope seems to perform better\n            var inputLen = input.length, delimLen = delim.length, newlineLen = newline.length, commentsLen = comments.length;\n            var stepIsFunction = isFunction(step);\n            // Establish starting state\n            cursor = 0;\n            var data = [], errors = [], row = [], lastCursor = 0;\n            if (!input) return returnable();\n            // Rename headers if there are duplicates\n            if (config.header && !baseIndex) {\n                var firstLine = input.split(newline)[0];\n                var headers = firstLine.split(delim);\n                var separator = \"_\";\n                var headerMap = [];\n                var headerCount = {};\n                var duplicateHeaders = false;\n                for(var j in headers){\n                    var header = headers[j];\n                    if (isFunction(config.transformHeader)) header = config.transformHeader(header, j);\n                    var headerName = header;\n                    var count = headerCount[header] || 0;\n                    if (count > 0) {\n                        duplicateHeaders = true;\n                        headerName = header + separator + count;\n                    }\n                    headerCount[header] = count + 1;\n                    // In case it already exists, we add more separtors\n                    while(headerMap.includes(headerName)){\n                        headerName = headerName + separator + count;\n                    }\n                    headerMap.push(headerName);\n                }\n                if (duplicateHeaders) {\n                    var editedInput = input.split(newline);\n                    editedInput[0] = headerMap.join(delim);\n                    input = editedInput.join(newline);\n                }\n            }\n            if (fastMode || fastMode !== false && input.indexOf(quoteChar) === -1) {\n                var rows = input.split(newline);\n                for(var i = 0; i < rows.length; i++){\n                    row = rows[i];\n                    cursor += row.length;\n                    if (i !== rows.length - 1) cursor += newline.length;\n                    else if (ignoreLastRow) return returnable();\n                    if (comments && row.substring(0, commentsLen) === comments) continue;\n                    if (stepIsFunction) {\n                        data = [];\n                        pushRow(row.split(delim));\n                        doStep();\n                        if (aborted) return returnable();\n                    } else pushRow(row.split(delim));\n                    if (preview && i >= preview) {\n                        data = data.slice(0, preview);\n                        return returnable(true);\n                    }\n                }\n                return returnable();\n            }\n            var nextDelim = input.indexOf(delim, cursor);\n            var nextNewline = input.indexOf(newline, cursor);\n            var quoteCharRegex = new RegExp(escapeRegExp(escapeChar) + escapeRegExp(quoteChar), \"g\");\n            var quoteSearch = input.indexOf(quoteChar, cursor);\n            // Parser loop\n            for(;;){\n                // Field has opening quote\n                if (input[cursor] === quoteChar) {\n                    // Start our search for the closing quote where the cursor is\n                    quoteSearch = cursor;\n                    // Skip the opening quote\n                    cursor++;\n                    for(;;){\n                        // Find closing quote\n                        quoteSearch = input.indexOf(quoteChar, quoteSearch + 1);\n                        //No other quotes are found - no other delimiters\n                        if (quoteSearch === -1) {\n                            if (!ignoreLastRow) {\n                                // No closing quote... what a pity\n                                errors.push({\n                                    type: \"Quotes\",\n                                    code: \"MissingQuotes\",\n                                    message: \"Quoted field unterminated\",\n                                    row: data.length,\n                                    index: cursor\n                                });\n                            }\n                            return finish();\n                        }\n                        // Closing quote at EOF\n                        if (quoteSearch === inputLen - 1) {\n                            var value = input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar);\n                            return finish(value);\n                        }\n                        // If this quote is escaped, it's part of the data; skip it\n                        // If the quote character is the escape character, then check if the next character is the escape character\n                        if (quoteChar === escapeChar && input[quoteSearch + 1] === escapeChar) {\n                            quoteSearch++;\n                            continue;\n                        }\n                        // If the quote character is not the escape character, then check if the previous character was the escape character\n                        if (quoteChar !== escapeChar && quoteSearch !== 0 && input[quoteSearch - 1] === escapeChar) {\n                            continue;\n                        }\n                        if (nextDelim !== -1 && nextDelim < quoteSearch + 1) {\n                            nextDelim = input.indexOf(delim, quoteSearch + 1);\n                        }\n                        if (nextNewline !== -1 && nextNewline < quoteSearch + 1) {\n                            nextNewline = input.indexOf(newline, quoteSearch + 1);\n                        }\n                        // Check up to nextDelim or nextNewline, whichever is closest\n                        var checkUpTo = nextNewline === -1 ? nextDelim : Math.min(nextDelim, nextNewline);\n                        var spacesBetweenQuoteAndDelimiter = extraSpaces(checkUpTo);\n                        // Closing quote followed by delimiter or 'unnecessary spaces + delimiter'\n                        if (input.substr(quoteSearch + 1 + spacesBetweenQuoteAndDelimiter, delimLen) === delim) {\n                            row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));\n                            cursor = quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen;\n                            // If char after following delimiter is not quoteChar, we find next quote char position\n                            if (input[quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen] !== quoteChar) {\n                                quoteSearch = input.indexOf(quoteChar, cursor);\n                            }\n                            nextDelim = input.indexOf(delim, cursor);\n                            nextNewline = input.indexOf(newline, cursor);\n                            break;\n                        }\n                        var spacesBetweenQuoteAndNewLine = extraSpaces(nextNewline);\n                        // Closing quote followed by newline or 'unnecessary spaces + newLine'\n                        if (input.substring(quoteSearch + 1 + spacesBetweenQuoteAndNewLine, quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen) === newline) {\n                            row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));\n                            saveRow(quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen);\n                            nextDelim = input.indexOf(delim, cursor); // because we may have skipped the nextDelim in the quoted field\n                            quoteSearch = input.indexOf(quoteChar, cursor); // we search for first quote in next line\n                            if (stepIsFunction) {\n                                doStep();\n                                if (aborted) return returnable();\n                            }\n                            if (preview && data.length >= preview) return returnable(true);\n                            break;\n                        }\n                        // Checks for valid closing quotes are complete (escaped quotes or quote followed by EOF/delimiter/newline) -- assume these quotes are part of an invalid text string\n                        errors.push({\n                            type: \"Quotes\",\n                            code: \"InvalidQuotes\",\n                            message: \"Trailing quote on quoted field is malformed\",\n                            row: data.length,\n                            index: cursor\n                        });\n                        quoteSearch++;\n                        continue;\n                    }\n                    continue;\n                }\n                // Comment found at start of new line\n                if (comments && row.length === 0 && input.substring(cursor, cursor + commentsLen) === comments) {\n                    if (nextNewline === -1) return returnable();\n                    cursor = nextNewline + newlineLen;\n                    nextNewline = input.indexOf(newline, cursor);\n                    nextDelim = input.indexOf(delim, cursor);\n                    continue;\n                }\n                // Next delimiter comes before next newline, so we've reached end of field\n                if (nextDelim !== -1 && (nextDelim < nextNewline || nextNewline === -1)) {\n                    row.push(input.substring(cursor, nextDelim));\n                    cursor = nextDelim + delimLen;\n                    // we look for next delimiter char\n                    nextDelim = input.indexOf(delim, cursor);\n                    continue;\n                }\n                // End of row\n                if (nextNewline !== -1) {\n                    row.push(input.substring(cursor, nextNewline));\n                    saveRow(nextNewline + newlineLen);\n                    if (stepIsFunction) {\n                        doStep();\n                        if (aborted) return returnable();\n                    }\n                    if (preview && data.length >= preview) return returnable(true);\n                    continue;\n                }\n                break;\n            }\n            return finish();\n            function pushRow(row) {\n                data.push(row);\n                lastCursor = cursor;\n            }\n            /**\n             * checks if there are extra spaces after closing quote and given index without any text\n             * if Yes, returns the number of spaces\n             */ function extraSpaces(index) {\n                var spaceLength = 0;\n                if (index !== -1) {\n                    var textBetweenClosingQuoteAndIndex = input.substring(quoteSearch + 1, index);\n                    if (textBetweenClosingQuoteAndIndex && textBetweenClosingQuoteAndIndex.trim() === \"\") {\n                        spaceLength = textBetweenClosingQuoteAndIndex.length;\n                    }\n                }\n                return spaceLength;\n            }\n            /**\n\t\t\t * Appends the remaining input from cursor to the end into\n\t\t\t * row, saves the row, calls step, and returns the results.\n\t\t\t */ function finish(value) {\n                if (ignoreLastRow) return returnable();\n                if (typeof value === \"undefined\") value = input.substring(cursor);\n                row.push(value);\n                cursor = inputLen; // important in case parsing is paused\n                pushRow(row);\n                if (stepIsFunction) doStep();\n                return returnable();\n            }\n            /**\n\t\t\t * Appends the current row to the results. It sets the cursor\n\t\t\t * to newCursor and finds the nextNewline. The caller should\n\t\t\t * take care to execute user's step function and check for\n\t\t\t * preview and end parsing if necessary.\n\t\t\t */ function saveRow(newCursor) {\n                cursor = newCursor;\n                pushRow(row);\n                row = [];\n                nextNewline = input.indexOf(newline, cursor);\n            }\n            /** Returns an object with the results, errors, and meta. */ function returnable(stopped) {\n                return {\n                    data: data,\n                    errors: errors,\n                    meta: {\n                        delimiter: delim,\n                        linebreak: newline,\n                        aborted: aborted,\n                        truncated: !!stopped,\n                        cursor: lastCursor + (baseIndex || 0)\n                    }\n                };\n            }\n            /** Executes the user's step function and resets data & errors. */ function doStep() {\n                step(returnable());\n                data = [];\n                errors = [];\n            }\n        };\n        /** Sets the abort flag */ this.abort = function() {\n            aborted = true;\n        };\n        /** Gets the cursor position */ this.getCharIndex = function() {\n            return cursor;\n        };\n    }\n    function newWorker() {\n        if (!Papa.WORKERS_SUPPORTED) return false;\n        var workerUrl = getWorkerBlob();\n        var w = new global.Worker(workerUrl);\n        w.onmessage = mainThreadReceivedMessage;\n        w.id = workerIdCounter++;\n        workers[w.id] = w;\n        return w;\n    }\n    /** Callback when main thread receives a message */ function mainThreadReceivedMessage(e) {\n        var msg = e.data;\n        var worker = workers[msg.workerId];\n        var aborted = false;\n        if (msg.error) worker.userError(msg.error, msg.file);\n        else if (msg.results && msg.results.data) {\n            var abort = function() {\n                aborted = true;\n                completeWorker(msg.workerId, {\n                    data: [],\n                    errors: [],\n                    meta: {\n                        aborted: true\n                    }\n                });\n            };\n            var handle = {\n                abort: abort,\n                pause: notImplemented,\n                resume: notImplemented\n            };\n            if (isFunction(worker.userStep)) {\n                for(var i = 0; i < msg.results.data.length; i++){\n                    worker.userStep({\n                        data: msg.results.data[i],\n                        errors: msg.results.errors,\n                        meta: msg.results.meta\n                    }, handle);\n                    if (aborted) break;\n                }\n                delete msg.results; // free memory ASAP\n            } else if (isFunction(worker.userChunk)) {\n                worker.userChunk(msg.results, handle, msg.file);\n                delete msg.results;\n            }\n        }\n        if (msg.finished && !aborted) completeWorker(msg.workerId, msg.results);\n    }\n    function completeWorker(workerId, results) {\n        var worker = workers[workerId];\n        if (isFunction(worker.userComplete)) worker.userComplete(results);\n        worker.terminate();\n        delete workers[workerId];\n    }\n    function notImplemented() {\n        throw new Error(\"Not implemented.\");\n    }\n    /** Callback when worker thread receives a message */ function workerThreadReceivedMessage(e) {\n        var msg = e.data;\n        if (typeof Papa.WORKER_ID === \"undefined\" && msg) Papa.WORKER_ID = msg.workerId;\n        if (typeof msg.input === \"string\") {\n            global.postMessage({\n                workerId: Papa.WORKER_ID,\n                results: Papa.parse(msg.input, msg.config),\n                finished: true\n            });\n        } else if (global.File && msg.input instanceof File || msg.input instanceof Object) {\n            var results = Papa.parse(msg.input, msg.config);\n            if (results) global.postMessage({\n                workerId: Papa.WORKER_ID,\n                results: results,\n                finished: true\n            });\n        }\n    }\n    /** Makes a deep copy of an array or object (mostly) */ function copy(obj) {\n        if (typeof obj !== \"object\" || obj === null) return obj;\n        var cpy = Array.isArray(obj) ? [] : {};\n        for(var key in obj)cpy[key] = copy(obj[key]);\n        return cpy;\n    }\n    function bindFunction(f, self1) {\n        return function() {\n            f.apply(self1, arguments);\n        };\n    }\n    function isFunction(func) {\n        return typeof func === \"function\";\n    }\n    return Papa;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/papaparse/papaparse.js\n");

/***/ })

};
;